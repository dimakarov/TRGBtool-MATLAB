function trgbtool(varargin)

InitInterface;


%============ INTERFACE ============
function hFig = InitInterface
ScreenSize = get(0,'ScreenSize');
WinShiftTop = 45;
WinWidth  = min( round(ScreenSize(3)*14/15) , 2000 ) ;
WinHeight = min( round(ScreenSize(4)*3/4) , 1400 ) ;
WinLeft   = 5;
WinDown   = ScreenSize(4)-WinHeight-WinShiftTop;
hFig = figure(...
    'DoubleBuffer','on',...
    'MenuBar','none',...
    'Name','TRGB tool',...
    'NumberTitle','off',...
    'PaperType','A4',...
    'PaperOrientation','landscape',...
    'PaperPositionMode','auto',...
    'Position',[WinLeft,WinDown,WinWidth,WinHeight],...
    'Resize','off',...
    'Visible','on',...
    'WindowButtonMotionFcn',{@callMouseMoving}...
    );

Head = 10;
Left = 10;
Ysep = 5;
Xsep = 5;
FontSize = 10;
NumberWidth = floor(FontSize*7/10);
EditorHeight = FontSize+9;
TextHeight = FontSize+3;

%---Data Frame---
FrameWidth = 1+5*Xsep+4*FontSize+6*NumberWidth+2*7+EditorHeight+2*(4*NumberWidth+2*7);
FrameHeight= 3*EditorHeight+5*Ysep;
FrameLeft  = Left ;
FrameDown  = WinHeight-Head-FrameHeight;
uicontrol('Style','frame',...
    'Position',[FrameLeft,FrameDown,FrameWidth,FrameHeight]);

Ycur = FrameDown+FrameHeight-Ysep-EditorHeight;
Xcur = FrameLeft+Xsep;
Xlen = FrameWidth-2*Xsep;
uicontrol('Style','edit',...
    'Tag','GalaxyID',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','left',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','Galaxy'...
    );
Xlen = round(2/5*Xlen)-5*Xsep;
Ycur = Ycur-Ysep-EditorHeight;
Xcur = FrameLeft+Xsep+round(FrameWidth/2)-Xlen;
he = uicontrol('Style','edit',...
    'Tag','A1',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','0'...
    );
ht = uicontrol('Style','text',...
    'Tag','A1',...
    'Position',[Xcur-Xsep-2*FontSize,Ycur+3,2*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','AV'...
    );
set(ht,'UserData',he);

Xcur = FrameLeft+FrameWidth-Xsep-Xlen;
he = uicontrol('Style','edit',...
    'Tag','A2',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','0'...
    );
ht = uicontrol('Style','text',...
    'Tag','A2',...
    'Position',[Xcur-Xsep-2*FontSize,Ycur+3,2*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','AI'...
    );
set(ht,'UserData',he);

Xlen = 8*FontSize+2*Xsep;
Ycur = Ycur-2*Ysep-EditorHeight;
Xcur = FrameLeft+Xsep;
uicontrol('Style','pushbutton',...
    'Tag','LoadData',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Load'...
    );

Xcur = FrameWidth+FrameLeft-Xsep-Xlen;
uicontrol('Style','pushbutton',...
    'Tag','SaveResults',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Save'...
    );

%---Fit Frame---
FrameHeight= 4*EditorHeight+TextHeight+6*Ysep;
FrameDown  = FrameDown-Head-FrameHeight;
uicontrol('Style','frame',...
    'Position',[FrameLeft,FrameDown,FrameWidth,FrameHeight]);

String='Parameters';
Ycur = FrameDown+FrameHeight-Ysep-TextHeight;
Xcur = FrameLeft+Xsep;
Xlen = length(String)*FontSize;
uicontrol('Style','text',...
    'Position',[Xcur,Ycur,Xlen,TextHeight],...
    'HorizontalAlignment','left',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String',String...
    );

Xlen = 6*NumberWidth+2*7;
Xcur = FrameLeft+Xsep+4*FontSize+Xsep;
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','M_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','00.00'...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','TRGB'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','A_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','00.00'...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','a'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','B_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','00.00'...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','b'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','C_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','00.00'...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','c'...
    );

String='Fix';
Ycur = FrameDown+FrameHeight-Ysep-TextHeight;
Xcur = Xcur+Xlen+Xsep;
Xlen = length(String)*FontSize;
uicontrol('Style','text',...
    'Position',[Xcur,Ycur,Xlen,TextHeight],...
    'HorizontalAlignment','left',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String',String...
    );
Xlen = EditorHeight;
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','checkbox',...
    'Tag','Fix_M_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'Value',0 ...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','checkbox',...
    'Tag','Fix_A_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'Value',0 ...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','checkbox',...
    'Tag','Fix_B_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'Value',0 ...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','checkbox',...
    'Tag','Fix_C_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'Value',0 ...
    );

String='Bounds';
Ycur = FrameDown+FrameHeight-Ysep-TextHeight;
Xcur = Xcur+Xlen+Xsep;
Xlen = length(String)*FontSize;
uicontrol('Style','text',...
    'Position',[Xcur,Ycur,Xlen,TextHeight],...
    'HorizontalAlignment','left',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String',String...
    );
Xlen = 4*NumberWidth+2*7;
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Left_M_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Left_A_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Left_B_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Left_C_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = FrameDown+FrameHeight-Ysep-TextHeight-Ysep-EditorHeight;
Xcur = Xcur+Xlen+1;
uicontrol('Style','edit',...
    'Tag','Right_M_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Right_A_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Right_B_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );
Ycur = Ycur-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Right_C_TRGB',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white'...
    );

FrameHeight= EditorHeight+2*Ysep;
FrameDown  = FrameDown+1-FrameHeight;
uicontrol('Style','frame',...
    'Position',[FrameLeft,FrameDown,FrameWidth,FrameHeight]);
Xlen = 6*NumberWidth+2*7;
Xcur = FrameLeft+Xsep+5*FontSize+Xsep;
Ycur = FrameDown+FrameHeight-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','LeftLFBound',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','-1'...
    );
uicontrol('Style','edit',...
    'Tag','RightLFBound',...
    'Position',[Xcur+Xlen+1,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String','+1'...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Range'...
    );

FrameHeight= 2*EditorHeight+2*Ysep+2*Ysep;
FrameDown  = FrameDown+1-FrameHeight;
uicontrol('Style','frame',...
    'Position',[FrameLeft,FrameDown,FrameWidth,FrameHeight]);
Ycur = FrameDown+FrameHeight-Ysep-EditorHeight;
uicontrol('Style','edit',...
    'Tag','Alpha',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'BackgroundColor','white',...
    'String',sprintf('%5.3f',1-(normcdf(1,0,1)-normcdf(-1,0,1)))...
    );
uicontrol('Style','text',...
    'Position',[Xcur-Xsep-4*FontSize,Ycur+3,4*FontSize,TextHeight],...
    'HorizontalAlignment','right',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Alpha'...
    );


Xlen = 8*FontSize+2*Xsep;
Ycur = Ycur-2*Ysep-EditorHeight;
Xcur = FrameLeft+Xsep;
uicontrol('Style','pushbutton',...
    'Tag','FitOptions',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Options'...
    );
Xcur = FrameWidth+FrameLeft-Xsep-Xlen;
uicontrol('Style','pushbutton',...
    'Tag','Fit',...
    'Position',[Xcur,Ycur,Xlen,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','Fit'...
    );

%---Status Frame---
FrameHeight= FrameDown-Head-Head;
FrameDown  = Head;
uicontrol('Style','frame',...
    'Position',[FrameLeft,FrameDown,FrameWidth,FrameHeight]);

Xcur = FrameLeft+Xsep;
Ycur = FrameDown+Ysep;
Xlen = FrameWidth-2*Xsep;
Ylen = FrameHeight-2*Ysep;
uicontrol('Style','text',...
    'Position',[Xcur,Ycur,Xlen,Ylen],...
    'HorizontalAlignment','left',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','',...
    'Tag','Status'...
    );


%---Axes---

LeftSpace = 52;
RightSpace= 10;
BottomSpace = 46;
YXRatio = 6/4;

Xcur = FrameLeft+FrameWidth+LeftSpace;
Xlen = min( round((WinWidth-Xcur-LeftSpace-RightSpace)/2),...
    round((WinHeight-Head-EditorHeight-Head-BottomSpace)/YXRatio));
Ylen = WinHeight-Head-EditorHeight-Head-BottomSpace;
Ycur = BottomSpace;

axes('Units','pixels', 'Position',[Xcur,Ycur,Xlen,Ylen],...
    'Tag','CMD',...
    'YDir','reverse',...
    'Visible','off'...
    );
axis equal;
line('XData',[],'YData',[],'Color','black','Tag','CMD_CurrentPoint');
text(0,0,'','Tag','CMD_X');
text(0,0,'','Tag','CMD_Y');

Naxes = 4;

uicontrol('Style','toggle',...
    'Tag','btnCompletenessPlot',...
    'Position',[WinWidth-RightSpace-Naxes*EditorHeight,WinHeight-Head-EditorHeight,EditorHeight,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','C'...
    );
uicontrol('Style','toggle',...
    'Tag','btnBiasPlot',...
    'Position',[WinWidth-RightSpace-(Naxes-1)*EditorHeight,WinHeight-Head-EditorHeight,EditorHeight,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','B'...
    );
uicontrol('Style','toggle',...
    'Tag','btnLFPlot',...
    'Position',[WinWidth-RightSpace-(Naxes-2)*EditorHeight,WinHeight-Head-EditorHeight,EditorHeight,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','#',...
    'Value',1 ...
    );
uicontrol('Style','toggle',...
    'Tag','btnLogLFPlot',...
    'Position',[WinWidth-RightSpace-(Naxes-3)*EditorHeight,WinHeight-Head-EditorHeight,EditorHeight,EditorHeight],...
    'HorizontalAlignment','center',...
    'FontUnits','pixels',...
    'FontSize',FontSize,...
    'FontWeight','bold',...
    'String','L',...
    'Value',1 ...
    );

Xcur = Xcur+Xlen+LeftSpace;
Xlen = WinWidth-Xcur-RightSpace;
Ylen = round( (WinHeight-BottomSpace-(Naxes-1)*Head - Head - EditorHeight - Head) / Naxes );
Ycur = WinHeight-Head-EditorHeight-Head-Ylen;
axes('Units','pixels', 'Position',[Xcur,Ycur,Xlen,Ylen],...
    'Tag','Completeness',...
    'XTickLabel',[],...
    'Visible','off'...
    );

Ycur = Ycur-Ylen-Head;
axes('Units','pixels', 'Position',[Xcur,Ycur,Xlen,Ylen],...
    'Tag','Bias',...
    'XTickLabel',[],...
    'Visible','off'...
    );

Ycur = Ycur-Ylen-Head;
axes('Units','pixels', 'Position',[Xcur,Ycur,Xlen,Ylen],...
    'Tag','LF',...
    'XTickLabel',[],...
    'Visible','off'...
    );

Ycur = Ycur-Ylen-Head;
axes('Units','pixels', 'Position',[Xcur,Ycur,Xlen,Ylen],...
    'Tag','logLF',...
    'XTickLabel',[],...
    'Visible','off'...
    );


%---Initialize callbacks---
h = findobj(hFig,'Style','checkbox','Tag','Fix_M_TRGB');
set(h,'CallBack',{@callFixButtonPressed,...
        findobj(hFig,'Style','edit','Tag','Left_M_TRGB'),...
        findobj(hFig,'Style','edit','Tag','Right_M_TRGB')});
h = findobj(hFig,'Style','checkbox','Tag','Fix_A_TRGB');
set(h,'CallBack',{@callFixButtonPressed,...
        findobj(hFig,'Style','edit','Tag','Left_A_TRGB'),...
        findobj(hFig,'Style','edit','Tag','Right_A_TRGB')});
h = findobj(hFig,'Style','checkbox','Tag','Fix_B_TRGB');
set(h,'CallBack',{@callFixButtonPressed,...
        findobj(hFig,'Style','edit','Tag','Left_B_TRGB'),...
        findobj(hFig,'Style','edit','Tag','Right_B_TRGB')});
h = findobj(hFig,'Style','checkbox','Tag','Fix_C_TRGB');
set(h,'CallBack',{@callFixButtonPressed,...
        findobj(hFig,'Style','edit','Tag','Left_C_TRGB'),...
        findobj(hFig,'Style','edit','Tag','Right_C_TRGB')});

set( findobj(hFig,'Style','pushbutton','Tag','LoadData'),...
    'CallBack',@callLoadData);
set( findobj(hFig,'Style','pushbutton','Tag','SaveResults'),...
    'CallBack',@callSaveResult);

set( findobj(hFig,'Style','edit','Tag','M_TRGB'),...
    'CallBack',@callEditChanged);
set( findobj(hFig,'Style','edit','Tag','LeftLFBound'),...
    'CallBack',@callEditChanged);
set( findobj(hFig,'Style','edit','Tag','RightLFBound'),...
    'CallBack',@callEditChanged);

set( findobj(hFig,'Style','pushbutton','Tag','FitOptions'),...
    'CallBack',@callFitOptions);
set( findobj(hFig,'Style','pushbutton','Tag','Fit'),...
    'CallBack',@callFit);

set( findobj(hFig,'Style','toggle','Tag','btnCompletenessPlot'),...
    'CallBack',{@callToggleAxesPressed,findobj(hFig,'Type','axes','Tag','Completeness')} ) ;
set( findobj(hFig,'Style','toggle','Tag','btnBiasPlot'),...
    'CallBack',{@callToggleAxesPressed,findobj(hFig,'Type','axes','Tag','Bias')} ) ;
set( findobj(hFig,'Style','toggle','Tag','btnLFPlot'),...
    'CallBack',{@callToggleAxesPressed,findobj(hFig,'Type','axes','Tag','LF')} ) ;
set( findobj(hFig,'Style','toggle','Tag','btnLogLFPlot'),...
    'CallBack',{@callToggleAxesPressed,findobj(hFig,'Type','axes','Tag','logLF')} ) ;


%========= CallBack ==========

function callFixButtonPressed(hButton,event,hLeft,hRight)
if get(hButton,'Value') == get(hButton,'Max')
    set(hLeft,'Enable','off','BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
    set(hRight,'Enable','off','BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
else
    set(hLeft,'Enable','on','BackgroundColor','white');
    set(hRight,'Enable','on','BackgroundColor','white');
end



function callSaveResult(hButton,event)
[FileName,PathName] = uiputfile(...
    { '*.mat','MATLAB file (*.mat)';...
        '*.*','All files (*.*)'},...
    'Save Result');
if ~ischar(FileName) | isempty(FileName), return; end;
data = GetAppData;
save(fullfile(PathName,FileName),'data');


function callLoadData(hButton,event)
[FileName,PathName] = uigetfile(...
    {'*.phot2;*.phot;*.mat','Data files (*.phot2,*.phot,*.mat)';...
        '*.phot2,*.phot','HSTPhot photometry (*.phot2,*.phot)';...
        '*.mat','MATLAB data (*.mat)';...
        '*.*','All files (*.*)'},...
    'Load Data');
if ischar(FileName)
    [p,n,e]=fileparts(FileName);
    FileName = fullfile(PathName,FileName);
    if strcmpi('.mat',e)
        SetAppData( LoadMATLABdata(FileName) );
        return;
    end;
    [FakeName,PathName] = uigetfile(...
        {'*.fake','Fake photometry (*.fake)';...
            '*.*','All files (*.*)'},...
        'Load Fake Photometry');
    if ~ischar(FakeName), return; end;
    FakeName = fullfile(PathName,FakeName);
    setstatus(gcbf,'Wait...');
    SetAppData( photometry(FileName,FakeName) ) ;
    setstatus(gcbf,'');
end;


function callMouseMoving(hFig,event)
ax = findobj(hFig,'Type','axes','Visible','on');
c = get(hFig,'CurrentPoint');
for k=1:length(ax)
    p = get(ax(k),'Position');
    if c(1)>=p(1) & c(1)<=p(1)+p(3) & c(2)>=p(2) & c(2)<=p(2)+p(4)
        c = get(ax(k),'CurrentPoint');
        x = get(ax(k),'XLim');
        y = get(ax(k),'YLim');
        if c(2,1)>=x(1) & c(2,1)<=x(2) & c(2,2)>=y(1) & c(2,2)<=y(2)
            set(hFig,'Pointer','crosshair');
            if strcmpi( get(ax(k),'Tag'), 'CMD' )
                d = min(x(2)-x(1),y(2)-y(1))/6;
                set( findobj(ax(k),'Type','line','Tag','CMD_CurrentPoint'),...
                    'XData',[x(1),max(c(2,1)-d,x(1)),NaN,...
                        min(c(2,1)+d,x(2)),x(2),NaN,...
                        c(2,1),c(2,1),NaN,c(2,1),c(2,1)],...
                    'YData',[c(2,2),c(2,2),NaN,c(2,2),c(2,2),NaN,...
                        y(1),max(c(2,2)-d,y(1)),NaN,...
                        min(c(2,2)+d,y(2)),y(2)],...
                    'Visible','on');
                set( findobj(ax(k),'Type','text','Tag','CMD_X'),...
                    'Position',[c(2,1),y(1),0],...
                    'String',sprintf('%4.2f',c(2,1)),...
                    'Visible','on'...
                    );
                set( findobj(ax(k),'Type','text','Tag','CMD_Y'),...
                    'Position',[x(2),c(2,2),0],...
                    'String',sprintf(' %4.2f',c(2,2)),...
                    'Visible','on'...
                    );
                set( findobj(ax,'Type','line','Tag','Y_CurrentPoint'),...
                    'XData',[c(2,2),c(2,2)],...
                    'Visible','on');
            else
                h = findobj(ax,'flat','Tag','CMD');
                x = get(h,'XLim');
                d = (x(2)-x(1))/3;
                set( findobj(h,'Type','line','Tag','CMD_CurrentPoint'),...
                    'XData',[x(1),x(1)+d,NaN,x(2)-d,x(2)],...
                    'YData',[c(2,1),c(2,1),NaN,c(2,1),c(2,1)],...
                    'Visible','on');
                set( findobj(h,'Type','text','Tag','CMD_Y'),...
                    'Position',[x(2),c(2,1),0],...
                    'String',sprintf(' %4.2f',c(2,1)),...
                    'Visible','on'...
                    );
                set( findobj(ax,'Type','line','Tag','Y_CurrentPoint'),...
                    'XData',[c(2,1),c(2,1)],...
                    'Visible','on');
            end;
            return;
        end;
    end;
end
set(hFig,'Pointer','arrow');
set( findobj(ax,'Type','line','Tag','CMD_CurrentPoint'), 'Visible','off');
set( findobj(ax,'Type','text','Tag','CMD_X'), 'Visible','off');
set( findobj(ax,'Type','text','Tag','CMD_Y'), 'Visible','off');
set( findobj(ax,'Type','line','Tag','Y_CurrentPoint'), 'Visible','off');


function callRoIbegin(ho,event)
% Get coordinates of current point
cp = get(get(ho,'Parent'),'CurrentPoint');
cx = cp(2,1);
cy = cp(2,2);
% Get RoI points
rx = get(ho,'XData'); 
ry = get(ho,'YData'); 
% Find nearest points
x = [min(rx),max(rx)]; 
dx = max(0.1,(x(2)-x(1))/10);
y = [min(ry),max(ry)];
dy = max(0.1,(y(2)-y(1))/10);
xi = find(abs(x(1)-cx)<dx);
if length(xi)>1, xi = xi(1); end;
yi = find(abs(y-cy)<dy);
if length(yi)>1, yi = yi(1); end;
if isempty(xi) && isempty(yi), return; end;
if isempty(xi)
    pointer = {'top','bottom'};
    pointer = pointer{yi};
elseif isempty(yi)
    pointer = {'left','right'};
    pointer = pointer{xi};
else
    pointer = {'topl','botl';'topr','botr'};
    pointer = pointer{xi,yi};
end;
User.X = x;
User.Y = y;
User.Xind = xi;
User.Yind = yi;
User.FigState = uisuspend(gcbf);
set(ho,'UserData',User);
set(gcbf,'Pointer',pointer,...
    'WindowButtonDownFcn','',...
    'WindowButtonMotionFcn',{@callRoImotion,ho},...
    'WindowButtonUpFcn',{@callRoIend,ho} );
set(ho,'Color','black','Marker','none','LineStyle','-','EraseMode','xor');


function callRoImotion(hFig,event,rect)
User = get(rect,'UserData');
ax = get(rect,'Parent');
cp = get( ax, 'CurrentPoint' );
X = sort( [get(ax,'XLim')+[0.1,-0.1],cp(2,1)] ); X=X(2);
Y = sort( [get(ax,'YLim')+[0.1,-0.1],cp(2,2)] ); Y=Y(2);
if ~isempty(User.Xind),   User.X(User.Xind) = X; end;
if ~isempty(User.Yind),   User.Y(User.Yind) = Y; end;
set(rect,'XData',[User.X(2),User.X(1),User.X(1),User.X(2)],...
    'YData',[User.Y(1),User.Y(1),User.Y(2),User.Y(2)]);


function callRoIend(hFig,event,rect)
User = get(rect,'UserData');
uirestore(User.FigState);
S = getstatus(hFig);
setstatus(hFig,'Wait...');
data = guidata(hFig);
data.RoI.X = get(rect,'XData');
data.RoI.Y = get(rect,'YData');
data = NewSelection( data );
guidata(hFig,data);
PlotData( data );
setstatus(hFig,S);


function callEditChanged(hEdit,event)
if ~isModified(hEdit), return; end;
data = guidata(hEdit);
switch get(hEdit,'Tag')
    case 'M_TRGB'
        data.Start(1) = getEdit(data.Start(1),hEdit,'M_TRGB',NaN);
    case 'LeftLFBound'
        data.RoI.LF(1) = getEdit(data.RoI.LF(1),hEdit,'LeftLFBound',-1);
    case 'RightLFBound'
        data.RoI.LF(2) = getEdit(data.RoI.LF(2),hEdit,'RightLFBound',-1);
    otherwise
        return;
end;
guidata(hEdit,data);
PlotData(data); 


function callMagSelected(hObj,event)
hAx = get(hObj,'Parent');
cp = get( hAx, 'CurrentPoint');
data = guidata(hObj);
if strcmpi( get(hAx,'Tag'), 'CMD' )
    data.Start(1) = cp(2,2);
else
    data.Start(1) = cp(2,1);
end;
setEdit(gcbf,'M_TRGB',data.Start(1),'%5.2f');
guidata(hObj,data);
PlotData(data);


function callToggleAxesPressed(hBtn,event,hAxes)
if get(hBtn,'Value') == get(hBtn,'Max')
    set( hAxes, 'Visible','on');
    set( get(hAxes,'Children'), 'Visible','on');
else
    set( hAxes, 'Visible','off');
    set( get(hAxes,'Children'), 'Visible','off');
end;
ResizeAxes( get(hBtn,'Parent') );


% callAxesLimDlg is replacement for obsolete axlimdlg function
% Interactive changes the axes limits
function callAxesLimDlg(hax,event)
if strcmpi(get(gcf,'SelectionType'),'open')
    prompt = {'X Lim','Y Lim'};
    title = 'Set up the axes limits';
    default = {num2str(xlim(gca)),num2str(ylim(gca))} ;
    res = inputdlg(prompt,title,1,default);
    if ~isempty(res)
        xlim(gca,str2num(res{1}));
        ylim(gca,str2num(res{2}));
    end;
end;



%========== Other Methods =============
function data = LoadMATLABdata(FileName)
load(FileName);


function tmp = PhotData2TRGBtool( data )
tmp.Galaxy = '';
if ~isfield(data,'absorption')
    for k=1:length(data), data(k).absorption = 0; end;
end;
tmp.data = data;
tmp.Xid = [1,2];
% tmp.Yid = 2;
tmp.Yid = 1; % case of JWST where I band corresponds to the "first" filter
tmp.X=data( tmp.Xid(1) ).mag - data( tmp.Xid(2) ).mag;
tmp.Y=data( tmp.Yid ).mag;
tmp.Xlabel = [data(tmp.Xid(1)).band,'-',data(tmp.Xid(2)).band,' (mag)'];
tmp.Ylabel = [data( tmp.Yid ).band,' (mag)'];
%RoI - Region of Interest
Xmin = 0.6;
Xmax = roundn(max(tmp.X),-2)+0.05;
Ymin = roundn(min(tmp.Y),-2)-0.05;
Ymax = roundn(max(tmp.Y),-2)+0.05;
tmp.RoI.X = [Xmin,Xmin,Xmax,Xmax,Xmin];
tmp.RoI.Y = [Ymin,Ymax,Ymax,Ymin,Ymin];
tmp = NewSelection( tmp ) ;
%Start Point
tmp.Start = [NaN;0.3;0.3;0.3];
tmp.Fixed = logical([0;0;0;0]);
tmp.Bounds = NaN + [ones(size(tmp.Start)),ones(size(tmp.Start))];
tmp.ActiveBounds = logical([0;0;0;0]);
tmp.RoI.LF = [-1,1];
tmp.Alpha = 1-(normcdf(1,0,1)-normcdf(-1,0,1));
%Minimization
tmp.options = optimset('LargeScale','off','Display','off');


function data = NewSelection( data )
Selected = data.Y>=min(data.RoI.Y) & data.Y<=max(data.RoI.Y) & ...
    (data.X>=min(data.RoI.X) | ~isfinite(data.X)) ;
xSelected = Selected & isfinite(data.X);
%Smoothed RGB
[data.RGB.Y,data.RGB.X,data.RGB.S,data.RGB.dfe] = ...
    smoothxy(data.Y(xSelected),data.X(xSelected),'span',20,'window',0.1);
%LF
w = std( data.Y(Selected) );
w = w * (4/(3*sum(Selected)))^(1/5);
w = w / 1.8;
[data.LF.Y,data.LF.X,u] = ksdensity(data.Y(Selected),...
    [min(data.RoI.Y):0.01:max(data.RoI.Y)], 'width', w);
data.LF.Y = data.LF.Y(:) .* sum(Selected) ;
data.LF.X = data.LF.X(:);
data.LF.Y = data.LF.Y ./ ...
    (normcdf(max(data.RoI.Y),data.LF.X,u)-normcdf(min(data.RoI.Y),data.LF.X,u));
data.LF.lgY = log10(data.LF.Y);    
data.LF.dY = filter2([-1;0;1],data.LF.Y);
data.LF.dY([1,end]) = [NaN,NaN];
data.LF.dlgY = filter2([-1;0;1],data.LF.lgY);
data.LF.dlgY([1,end]) = [NaN,NaN];




function h = setEdit(hFig,Tag,Value,Fmt)
%Usage:
%  setEdit(hFig,Tag,string)
%  setEdit(hFig,Tag,double,format)
S = '';
if ischar(Value)
    S=Value;
elseif isfinite(Value)
    S = sprintf(Fmt,Value);
end;
h = findobj(hFig,'Style','edit','Tag',Tag);
set( h, 'String', S, 'UserData', S ) ; 


function f=isModified(hEdit)
f=~strcmp(get(hEdit,'String'),get(hEdit,'UserData'));


function V=getEdit(V,hFig,Tag,Def)
h = findobj(hFig,'Style','edit','Tag',Tag);
if isModified(h)
    if isnumeric(V)
        V = str2num( get(h,'String') ) ;
    else
        V = get(h,'String');
        V = fliplr(deblank(fliplr(deblank(V))));
        set(h,'String',V);
    end;
    if isempty(V) & exist('Def','var'), 
        V=Def; 
    end;
    %Set isModified to FALSE
    set(h,'UserData', get(h,'String') );
end;


function SetAppData( data )
if ~isstruct(data)
    errordlg('Unknown data');
    return;
end;
if isempty( strmatch( 'Galaxy', fieldnames(data), 'exact' ) )
    data = PhotData2TRGBtool( data );
end;
hFig=gcbf;
setEdit(hFig,'GalaxyID',data.Galaxy);
for k=1:length(data.data)
    Tag = ['A',num2str(k)];
    setEdit(hFig,Tag,data.data(k).absorption,'%5.3f');
    set( findobj(hFig,'Style','text','Tag',Tag), ...
        'String', ['A',data.data(k).band] );
end;
Tags = {'M_TRGB','A_TRGB','B_TRGB','C_TRGB'};
for k=1:4
    setEdit(hFig,Tags{k},data.Start(k),'%5.2f');
    hc = findobj(hFig,'Style','checkbox','Tag',['Fix_',Tags{k}]) ;
    set( hc, 'Value', data.Fixed(k) );
    hlb = setEdit(hFig, ['Left_',Tags{k}], data.Bounds(k,1),'%4.2f') ;
    hub = setEdit(hFig, ['Right_',Tags{k}], data.Bounds(k,2),'%4.2f') ;
    callFixButtonPressed(hc,[],hlb,hub);
end;
setEdit(hFig, 'LeftLFBound', data.RoI.LF(1),'%+4.2f') ;
setEdit(hFig, 'RightLFBound', data.RoI.LF(2),'%+4.2f') ;
if ~isfield(data,'Alpha'), data.Alpha = 1-(normcdf(1,0,1)-normcdf(-1,0,1)); end;
setEdit(hFig, 'Alpha', data.Alpha,'%5.3f') ;
guidata(hFig,data);
set( findobj(hFig,'Type','axes','Tag','CMD'), 'XLimMode','auto', 'YLimMode','auto' );
PlotData(data);
DisplayResult(data);


function data = GetAppData
hFig = gcbf;
data = guidata(hFig);
%GalaxyID
data.Galaxy = getEdit(data.Galaxy, hFig, 'GalaxyID');
%Absorption
for k=1:length(data.data)
    data.data(k).absorption = getEdit(data.data(k).absorption,...
        hFig, ['A',num2str(k)], 0 );
end;
%Start point
Tags = {'M_TRGB','A_TRGB','B_TRGB','C_TRGB'};
for k=1:4
    %Start
    data.Start(k) = getEdit(data.Start(k), hFig, Tags{k}, NaN);
    %Fixed
    h = findobj(hFig,'Style','checkbox','Tag',['Fix_',Tags{k}]) ;
    data.Fixed(k) = logical( get( h, 'Value' ) ) ;
    %Bounds
    data.Bounds(k,1) = getEdit(data.Bounds(k,1),...
        hFig, ['Left_',Tags{k}], -Inf);
    data.Bounds(k,2) = getEdit(data.Bounds(k,2),...
        hFig, ['Right_',Tags{k}], Inf);
end;
data.ActiveBounds = ~data.Fixed(:) & ...
    ( isfinite(data.Bounds(:,1)) | isfinite(data.Bounds(:,2)) );
%LF
V(1) = getEdit(data.RoI.LF(1), hFig, 'LeftLFBound', -1);
V(2) = getEdit(data.RoI.LF(2), hFig, 'RightLFBound', 1);
data.RoI.LF = sort(V);
data.Alpha = getEdit(data.Alpha, hFig, 'Alpha', 1-(normcdf(1,0,1)-normcdf(-1,0,1)) );
%Save
guidata(hFig,data);



function PlotData(data)
hFig = gcbf;
if nargin==0, data=guidata(hFig); end;
%---CMD Graph---
axes( findobj(hFig,'Type','axes','Tag','CMD') );
isAuto = logical(1);
if strcmpi( get(gca,'XLimMode'),'manual' ) | ...
        strcmpi( get(gca,'YLimMode'),'manual' )
    X = xlim;
    Y = ylim;
    isAuto = logical(0);
end;
% Data for maximum likelihood is red;
% Other data is gray
Selected = GetSelected(data);
plot(data.X(~Selected),data.Y(~Selected),'.','MarkerEdgeColor',[0.5,0.5,0.5],'MarkerSize',1);
hold on;
plot(data.X(Selected),data.Y(Selected),'.r','MarkerSize',1);
% It's sliding mean for selected points
plot(data.RGB.X,data.RGB.Y,'-m','LineWidth',2,'EraseMode','xor',...
    'ButtonDownFcn',@callMagSelected);
% Cursor position
line('XData',[],'YData',[],'Color','black','Tag','CMD_CurrentPoint');
text(0,0,'','Tag','CMD_X', ...
    'BackGroundColor','white',...
    'HorizontalAlignment','center',...
    'VerticalAlignment','bottom');
text(0,0,'','Tag','CMD_Y', ...
    'BackGroundColor','white',...
    'HorizontalAlignment','left',...
    'VerticalAlignment','middle');
% graph parameters
if isAuto
    X=xlim;
    Y=ylim;
end;
set(gca,'YDir','reverse','Tag','CMD', ...
    'ButtonDownFcn',@callAxesLimDlg);
axis equal;
axis([X,Y]);
xlabel(data.Xlabel);
ylabel(data.Ylabel);
% It's region of interest (RoI)
X=xlim;  X(1)=min(data.RoI.X) ;
Y=[min(data.RoI.Y),max(data.RoI.Y)] ;
X=[X(2),X(1),X(1),X(2)];
Y=[Y(1),Y(1),Y(2),Y(2)];
plot(X,Y,'--sc','MarkerSize',4,'MarkerFaceColor','c',...
    'Tag','CMD_RoI',...
    'ButtonDownFcn',@callRoIbegin);
hold off;

%---Statistics---
mag = data.data(data.Yid).fake.mag;
[compl,bias,sigma] = photerrors(mag,data.data(data.Yid).fake);
%---Completeness Graph---
hAx(1) = findobj(hFig,'Type','axes','Tag','Completeness');
axes( hAx(1) );
plot(mag,compl,'-b');
hold on;
line('XData',[NaN,NaN],'YData',ylim,'Color','black',...
    'Tag','Y_CurrentPoint',...
    'ButtonDownFcn',@callMagSelected);
set(hAx(1),'Tag','Completeness', 'XTickLabel',[]);
hold off;
%---Bias Graph---
hAx(2) = findobj(hFig,'Type','axes','Tag','Bias');
axes( hAx(2) );
xyerrorbar(mag,bias,'yerr',sigma,'ycap',0,'-b');
hold on;
line('XData',[NaN,NaN],'YData',ylim,'Color','black',...
    'Tag','Y_CurrentPoint',...
    'ButtonDownFcn',@callMagSelected );
set( hAx(2), 'Tag','Bias', 'YDir','reverse', 'XTickLabel',[]);
hold off;
%---LF Graph---
hAx(3) = findobj(hFig,'Type','axes','Tag','LF') ;
axes( hAx(3) );
% Model
plot(NaN,NaN,'-c', 'Tag','LF_Res_Model', 'LineWidth',1.5);
hold on;
plot(NaN,NaN,'-m', 'Tag','LF_Res', 'LineWidth',1.5);
% Luminosity function
plot(data.LF.X,data.LF.Y,'-b');
X=xlim;
Y=ylim;
% Sobel filter
plot(data.LF.X,data.LF.dY/max(data.LF.dY)*max(data.LF.Y),'-g');
% Highlight the starting point and region for minimization
plot([data.Start(1),data.Start(1)],Y,'--r', 'Tag','Start_M_TRGB');
plot(data.Start(1),Y(1),'^r', 'MarkerSize',5,'MarkerFaceColor','red');
plot(data.Start(1),Y(2),'vr', 'MarkerSize',5,'MarkerFaceColor','red');
plot([data.Start(1),data.Start(1)]+data.RoI.LF(1),Y,':r', 'Tag','LeftLFBound');
plot([data.Start(1),data.Start(1)]+data.RoI.LF(2),Y,':r', 'Tag','RightLFBound');
plot([data.Start(1)+data.RoI.LF(1),data.Start(1)+data.RoI.LF(2),NaN,...
        data.Start(1)+data.RoI.LF(1),data.Start(1)+data.RoI.LF(2)],...
    [Y(1),Y(1),NaN,Y(2),Y(2)],'-r', 'LineWidth',3);
% Cursor position
line('XData',[NaN,NaN],'YData',Y,'Color','black',...
    'Tag','Y_CurrentPoint',...
    'ButtonDownFcn',@callMagSelected );
% graph parameters
axis([X,Y]);
set(gca,'Tag','LF', 'XTickLabel',[]);
hold off;
%---logLF Graph---
hAx(4) = findobj(hFig,'Type','axes','Tag','logLF');
axes( hAx(4) );
% Model
plot(NaN,NaN,'-c', 'Tag','logLF_Res_Model', 'LineWidth',1.5);
hold on;
plot(NaN,NaN,'-m', 'Tag','logLF_Res', 'LineWidth',1.5);
% Logariphm of Luminosity function
plot(data.LF.X,data.LF.lgY,'-b');
Y=ylim;
% Sobel filter
plot(data.LF.X,min(data.LF.lgY)+(data.LF.dlgY-min(data.LF.dlgY))/(max(data.LF.dlgY)-min(data.LF.dlgY))*(max(data.LF.lgY)-min(data.LF.lgY)),'-g');
% Highlight the starting point and region for minimization
plot([data.Start(1)+data.RoI.LF(1),data.Start(1)+data.RoI.LF(2),NaN,...
        data.Start(1)+data.RoI.LF(1),data.Start(1)+data.RoI.LF(2)],...
    [Y(1),Y(1),NaN,Y(2),Y(2)],'-r', 'LineWidth',3);
plot(data.Start(1),Y(1),'^r', 'MarkerSize',5,'MarkerFaceColor','red');
plot(data.Start(1),Y(2),'vr', 'MarkerSize',5,'MarkerFaceColor','red');
plot([data.Start(1),data.Start(1)],Y,'--r', 'Tag','Start_M_TRGB');
plot([data.Start(1),data.Start(1)]+data.RoI.LF(1),Y,':r', 'Tag','LeftLFBound');
plot([data.Start(1),data.Start(1)]+data.RoI.LF(2),Y,':r', 'Tag','RightLFBound');
% Cursor position
line('XData',[NaN,NaN],'YData',Y,'Color','black',...
    'Tag','Y_CurrentPoint',...
    'ButtonDownFcn',@callMagSelected);
% graph parameters
set(gca,'XLim',X,'YLim',Y,'Tag','logLF', 'XTickLabel',[]);
hold off;
%---Model Graph---
if isfield(data,'Result')
    PlotModel( data.Result.Param, data.Y(Selected), data.data(data.Yid).fake );
end;
set(hAx,'XLim',X);
for k=1:length(hAx)
    set(hAx(k),'YLim',get(hAx(k),'YLim'));
end;
SetAxesVisibility(hFig);
ResizeAxes(hFig);
axes( findobj(hFig,'Type','axes','Tag','CMD') );



function PlotModel(X,mag,fake);
if isempty(X) | isempty(mag), return; end;
A = min(mag);
B = max(mag);
M = [ linspace(A,X(1)*(1-eps),100), linspace(X(1),B,100) ];
Y = lf('obs',X,M,fake) * length(mag);
Y0 = lf('model',X,M) * length(mag);
lgY = log10(Y);
lgY0 = log10(Y0);

hFig = gcbf;

h = findobj(hFig,'Type','line','Tag','LF_Res_Model');
set(h, 'XData',M, 'YData',Y0);

h = findobj(hFig,'Type','line','Tag','LF_Res');
set(h, 'XData',M, 'YData',Y);

h = findobj(hFig,'Type','line','Tag','logLF_Res_Model');
set(h, 'XData',M, 'YData',lgY0);

h = findobj(hFig,'Type','line','Tag','logLF_Res');
set(h, 'XData',M, 'YData',lgY);



function ResizeAxes(hFig)
hAx = findobj(hFig,'Type','axes');
p = logical(ones(size(hAx)));
for k=1:length(p)
    p(k) = strcmpi( get(hAx(k),'Visible'), 'on' ) & ~strcmpi( get(hAx(k),'Tag'), 'CMD' ) ;
end;
hAx(~p) = [];
hAx = flipud( sort(hAx) );
Naxes = length(hAx);
if Naxes==0, return; end;
FigSize = get(hFig,'Position');
WinHeight = FigSize(4);
BottomSpace = 46;
Head = 10;
FontSize = 10;
EditorHeight = FontSize+9;

Ylen = round( (WinHeight-BottomSpace-(Naxes-1)*Head - Head - EditorHeight - Head) / Naxes );
Ycur = WinHeight-Head-EditorHeight-Head-Ylen;
for k=Naxes:-1:1
    Pos = get(hAx(k),'Position');
    Pos(4) = Ylen;
    Pos(2) = Ycur;
    set(hAx(k),'Position',Pos,'XTickLabel',[]);
    Ycur = Ycur-Ylen-Head;

    axes(hAx(k));
    xlabel([]);
end;

set(hAx(1),'XTickLabelMode','auto');
axes(hAx(1));
data = guidata(hFig);
xlabel(data.Ylabel);

axes( findobj(hFig,'Type','axes','Tag','CMD') );


function SetAxesVisibility(hFig)
hB = findobj(hFig,'Style','toggle');
for k=1:length(hB)
    S = get(hB(k),'CallBack');
    if length(S)~=2, continue; end;
    if get(hB(k),'Value')==get(hB(k),'Max')
        set( S{2}, 'Visible','on' );
        set( get(S{2},'Children'), 'Visible','on' );
    else
        set( S{2}, 'Visible','off' );
        set( get(S{2},'Children'), 'Visible','off' );
    end;
end;
    


%========== Fitting ==============
function callFit(hButton,event)
data = GetAppData;
setstatus(gcbf,'Wait...');
%Get selected points
p = GetSelected(data);
data.Selected = p;
if any(data.Fixed)
    ind = ~data.Fixed;
    X0 = data.Start(ind);
    Prm= {ind, data.Start, data.Y(p), data.data(data.Yid).fake};
    Bnd= data.Bounds(ind,:);
    fun = @lff;
    if strcmpi(data.options.Display,'iter'), fun = @lffd; end;
else
    X0 = data.Start;
    Prm= {data.Y(p), data.data(data.Yid).fake};
    Bnd= data.Bounds;
    fun = 'lf';
    if strcmpi(data.options.Display,'iter'), fun = @lfud; end;
end;
Bnd(isnan(Bnd(:,1)),1) = -Inf;
Bnd(isnan(Bnd(:,2)),2) = Inf;
s = warning('off');
if any(data.ActiveBounds)
    %Constrained minimization
    [ B, ML, exitflag, output ] = ...
        fmincon( fun, X0, [],[],[],[], Bnd(:,1), Bnd(:,2), [], data.options, Prm{:} );    
else
    %Unconstrained minimization
    [ B, ML, exitflag, output ] = ...
        fminunc( fun, X0, data.options, Prm{:} );
end;
CI = mlci( fun, B, ML, data.Alpha, Prm{:} );
warning(s);
data.Result.Npoints = length(data.Y(p));
data.Result.Nparams = length(B);
data.Result.ML = ML;
data.Result.exitflag = exitflag;
data.Result.output = output;
if any(data.Fixed)
    data.Result.Param = data.Start;
    data.Result.Param(ind) = B;
    data.Result.CI = NaN + zeros(size(data.Bounds));
     data.Result.CI(ind,:) = CI;
else
    data.Result.Param = B;
    data.Result.CI = CI;
end;
%Compute TRGB Color
Y = data.Result.Param(1);
Y = [Y,Y+0.5];
buf1 = pchip(data.RGB.Y,data.RGB.X,Y);
data.Result.Color.TRGB = buf1(1);
data.Result.Color.TRGB05 = buf1(2);
%Compute Conf.Intervals fro TRGB Color
dfe = pchip(data.RGB.Y,data.RGB.dfe,Y);
S = pchip(data.RGB.Y,data.RGB.S,Y);
S = tinv(1-data.Alpha/2,dfe) .* S;
Y = data.Result.CI(1,:);
Y = [Y,Y+0.5];
buf2 = pchip(data.RGB.Y,data.RGB.X,Y);
buf2 = abs([buf2(1)-buf1(1),buf2(2)-buf1(1), buf2(3)-buf1(2),buf2(4)-buf1(2)]);
buf2 = sqrt( [ buf2(1).^2+S(1).^2, buf2(2).^2+S(1).^2, buf2(3).^2+S(2).^2, buf2(4).^2+S(2).^2 ] );
data.Result.Color.TRGBCI = data.Result.Color.TRGB + [-buf2(1),buf2(2)];
data.Result.Color.TRGB05CI = data.Result.Color.TRGB05 + [-buf2(3),buf2(4)];
%Save & display Result
guidata(hButton,data);
setstatus('');
DisplayResult(data);
PlotModel(data.Result.Param, data.Y(p), data.data(data.Yid).fake);



function f=lfud(X,mag,fake)
f=lf(X,mag,fake);
PlotModel(X,mag,fake);
drawnow;


function f=lff(X,ind,X0,mag,fake)
X0(ind) = X;
f = lf(X0,mag,fake);


function f=lffd(X,ind,X0,mag,fake)
X0(ind) = X;
f = lf(X0,mag,fake);
PlotModel(X0,mag,fake);
drawnow;


function p = GetSelected(data)
p = data.Y>=min(data.RoI.Y) & data.Y<=max(data.RoI.Y) & ...
    (data.X>=min(data.RoI.X) | ~isfinite(data.X)) & ...
    data.Y>=data.Start(1)+data.RoI.LF(1) & ...
    data.Y<=data.Start(1)+data.RoI.LF(2);



function S = GetResultString(Fixed,Param,CI)
if Fixed
    S = sprintf(' = %5.3f',Param);
else
    S = sprintf(' = %5.3f  (%5.3f,%5.3f)',[Param,CI]);
end;

function DisplayResult(data)
if ~isfield(data,'Result'), return; end;
S = {   ...
        ['TRGB',GetResultString(data.Fixed(1),data.Result.Param(1),data.Result.CI(1,:))], ...
        ['   a',GetResultString(data.Fixed(2),data.Result.Param(2),data.Result.CI(2,:))], ...
        ['   b',GetResultString(data.Fixed(3),data.Result.Param(3),data.Result.CI(3,:))], ...
        ['   c',GetResultString(data.Fixed(4),data.Result.Param(4),data.Result.CI(4,:))], ...
        '', ...
        ['(',data.data(data.Xid(1)).band,'-',data.data(data.Xid(2)).band,')T',...
            sprintf(' = %5.3f  (%5.3f,%5.3f)',[data.Result.Color.TRGB,data.Result.Color.TRGBCI])], ...
        ['(',data.data(data.Xid(1)).band,'-',data.data(data.Xid(2)).band,')T+0.5',...
            sprintf(' = %5.3f  (%5.3f,%5.3f)',[data.Result.Color.TRGB05,data.Result.Color.TRGB05CI])], ...
        '', ...
        sprintf('N(points) = %d  N(params) = %d',[data.Result.Npoints,data.Result.Nparams]), ...
        sprintf('L = %g  L/N = %g',[data.Result.ML,data.Result.ML/data.Result.Npoints]), ...
        '', ...
        data.Result.output.algorithm, ...
        sprintf('N(iter)=%d  N(func)=%d', [data.Result.output.iterations,data.Result.output.funcCount] ), ...
        sprintf('Grad=%g',data.Result.output.firstorderopt ) ...
    };
if data.Result.exitflag<=0,   
    S = { 'Minimun is not reached', S{:} } ; 
end;
setstatus(S);

for k=1:length(S)
    fprintf('%s\n',S{k}) ; 
end;




function callFitOptions(hButton,event)
data = guidata(hButton);
[data.options,isOk] = getFitOptions( data.options );
if isOk
    guidata(hButton,data);
end;


function [opt,isOk] = getFitOptions( opt )

Head = 10;
Left = 10;
Ysep = 5;
Xsep = 5;
FontSize = 10;
NumberWidth = floor(FontSize*7/10);
EditorHeight = FontSize+9;
TextHeight = FontSize+3;
EditorWidth = NumberWidth*12;

FieldList = { ...
        'DerivativeCheck',...
        'Diagnostics',...
        'Display',...
        'MaxFunEvals',...
        'MaxIter',...
        'TolFun',...
        'TolCon',...
        'TolX' };
TypeList = { ...
        'OnOff',...
        'OnOff',...
        'IterFinalOff',...
        'Numeric',...
        'Numeric',...
        'Numeric',...
        'Numeric',...
        'Numeric' };
        
WinHeight = 2*Head + length(FieldList)*EditorHeight + (length(FieldList)-1)*Ysep + 2*Ysep + EditorHeight;
WinWidth  = 2*Left + FontSize*15 + Xsep + EditorWidth ;

hDlg = dialog('Name','Optimization Options',...
    'Position',[5,5,WinWidth,WinHeight],...
    'Visible','off');
movegui(hDlg,'center');

Xcur = WinWidth-Xsep-EditorWidth;
for k=1:length(FieldList)
    Ycur = WinHeight-Head-k*EditorHeight-(k-1)*Ysep;
    h = uicontrol('Style','edit',...
        'Tag',FieldList{k},...
        'Position',[Xcur,Ycur,EditorWidth,EditorHeight],...
        'HorizontalAlignment','right',...
        'FontUnits','pixels',...
        'FontSize',FontSize,...
        'FontWeight','bold',...
        'BackgroundColor','white' );
    if ischar(opt.(FieldList{k}))
       set(h,'String',opt.(FieldList{k}));
    else
       set(h,'String',num2str(opt.(FieldList{k})));
    end;
    uicontrol('Style','text',...
        'Position',[Xsep,Ycur+3,Xcur-2*Xsep,TextHeight],...
        'HorizontalAlignment','right',...
        'FontUnits','pixels',...
        'FontSize',FontSize,...
        'FontWeight','bold',...
        'String',FieldList{k} );
end;

uicontrol('Style','pushbutton', 'String','Ok', ...
    'Position',[Left,Head,EditorWidth,EditorHeight],...
    'CallBack','uiresume(gcbf)');
uicontrol('Style','pushbutton', 'String','Cancel', ...
    'Position',[WinWidth-Left-EditorWidth,Head,EditorWidth,EditorHeight],...
    'CallBack','uiresume(gcbf)');

set(hDlg,'Visible','on');

while 1
    uiwait(hDlg);
    isOk = logical(0);
    if ~ishandle(hDlg) |...
            ~strcmp( get(get(hDlg,'CurrentObject'),'String'), 'Ok')
        break;
    end;
    isOk = logical(1);
    try
        for k=1:length(FieldList)
            S = get(findobj(hDlg,'Style','edit','Tag',FieldList{k}),'String');
            if isempty(S), 
                opt = optimset(opt,FieldList{k},[]); 
                continue;
            end;
            switch TypeList{k}
                case 'OnOff'
                    opt = optimset(opt,FieldList{k},S); 
                case 'IterFinalOff'
                    opt = optimset(opt,FieldList{k},S); 
                case 'Numeric'
                    opt = optimset(opt,FieldList{k},str2num(S)); 
            end;
        end;
        break;
    catch
        errordlg(lasterr);
        continue;
    end;
end;
if ishandle(hDlg), delete(hDlg); end;

